lam = seq(0,.1,.001)
set.seed(12345)
fit = cv.glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
fit = glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, lambda=0)
summary(fit)
fit = glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, lambda=lam)
summary(fit)
Fit_forward<- lm(log(y)~ x3 + x13 + x15 + x8 + x12, data = baseball[0:200, ])
summary(Fit_forward)
fit = cv.glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= 0)
baseball <- read.csv('/users/andrewhu/desktop/baseball.csv')
plot(bodyfat)
plot(bodyfat)
baseball <- read.csv('/users/andrewhu/desktop/baseball.csv')
plot(baseball)
round(cor(baseball), 2)
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball[0:200,]$y, alpha=0, lambda=0)
summary(fit)
fit = glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball[0:200,]$y, alpha=0, nfolds=5, lambda=0)
baseball$y= log(baseball$y)
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball$y, alpha=0,lambda= seq(0,1,.001))
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseballl[0:200,]$y, alpha=0,lambda= seq(0,1,.001))
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball[0:200,]$y, alpha=0,lambda= seq(0,1,.001))
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball[0:200,]$y, alpha=0,nfolds=5,lambda= seq(0,1,.001))
fit = glmnet(as.matrix(baseball[0:200,2:15]), baseball[0:200,]$y, alpha=0,lambda= seq(0,1,.001))
set.seed(12345)
fit = cv.glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
fit = cv.glmnet(as.matrix(baseball[0:200,2:15]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
round(cor(baseball), 2)
baseblaa[1,1]
baseball[1,1]
round(cor(baseball[1,1]), 2)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=0.018)
summary(fi)
summary(fit)
coef(fit,s="lambda.min")
coef(fit2,s="lambda.min")
fit1 = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
fit1 = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
set.seed(12345)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
set.seed(12345)
lam = seq(0,.1,.001)
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0,lambda= seq(0,1,.001))
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, nfolds=5,lambda= seq(0,1,.001))
fit$lambda.min
baseball$y= log(baseball$y)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball$y, alpha=0, nfolds=5)
fit$lambda.min
coef(fit2,s="lambda.min")
coef(fit2,s="lambda.min")
coef(fit,s="lambda.min")
dim(fit)
length(fit)
fit = cv.glmnet(as.matrix(baseball[0:200,]), baseball$y, alpha=0, nfolds=5)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17=]), baseball[0:200,]$y, alpha=0, nfolds=5)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, nfolds=5)
fit$lambda.min
fit = cv.glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, nfolds=5)
fit$lambda.min
coef(fit,s="lambda.min")
fit$lambda.min
fit = cv.glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, nfolds=5)
fit$lambda.min
coef(fit,s="lambda.min")
yhat = predict(fit, baseball[0:200,])
round(cor(baseball[0:200,]), 2)
lam = seq(0,.1,.001) # specify the range of lambda
fit = glmnet(as.matrix(bodyfat[0:200,2:17]), baseball$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(bodyfat[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=lam)
fit<- cv.glmnet(as.matrix(baseball[0:200,2:17], baseball$y, alpha=0, nfolds=5)
fit$lambda.min
round(cor(baseball[0:200,]), 2)
fit<- cv.glmnet(as.matrix(baseball[0:200,2:17], baseball$y, alpha=0, nfolds=5)
fit$lambda.min
round(cor(baseball[0:200,]), 2)
set.seed(12345)
fit <-cv.glmnet(as.matrix(baseball[0:200,2:17], baseball$y, alpha=0, nfolds=5))
fit <-cv.glmnet(as.matrix(baseball[0:200,2:17], baseball[0:200,]$y, alpha=0, nfolds=5))
fit = glmnet(as.matrix(baseball[0:200,]), baseball[0:200,]$y, alpha=0, lambda=lam)
set.seed(12345)
fit <-cv.glmnet(as.matrix(baseball[0:200,], baseball[0:200,]$y, alpha=0, nfolds=5))
baseball <- read.csv('/users/andrewhu/desktop/baseball.csv')
baseball$y= log(baseball$y)
set.seed(12345)
round(cor(baseball), 2)
lam = seq(0,.1,.001)
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[1:200,2:17]), baseball[1:200]$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[1:200,2:17]), baseball[1:200]$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[1:200,2:16]), baseball[1:200]$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[1:200]$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200]$y, alpha=0, lambda=lam)
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=lam)
length(fit)
length(baseball)
dim(fit)
dim(baseball)
fit$lambda.min
fit = glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=lam)
fit$lambda.min
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=lam)
fit$lambda.min
round(cor(baseball), 2)
lam = seq(0,.1,.001)
set.seed(12345)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=lam)
fit$lambda.min
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=0, lambda=seq(0,1,.001))
fit$lambda.min
yhat = predict(fit, baseball[0:200,])
yhat = predict(fit, baseball[0:200,2:17])
set.seed(12345)
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=1, lambda=seq(0,1,.001))
fit$lambda.min
fit = cv.glmnet(as.matrix(baseball[0:200,2:17]), baseball[0:200,]$y, alpha=1, lambda=seq(0,1,.001))
yhat = predict(fit, baseball[0:200,])
energy <- read.csv('/users/andrewhu/desktop/energy.csv')
baseball <- read.csv('/users/andrewhu/desktop/baseball.csv')
fit_train <- glm(try~sex+age+exercise+innovation+user,family=binomial(link="probit"), data=energy,subset=train)
summary(fit1)
fit1$null.deviance - fit1$deviance
1-pchisq(fit1$null.deviance- fit1$deviance,6)
energy <- read.csv('/users/andrewhu/desktop/energy.csv')
baseball <- read.csv('/users/andrewhu/desktop/baseball.csv')
fit_train <- glm(try~sex+age+exercise+innovation+user,family=binomial(link="probit"), data=energy,subset=train)
fit_test <-glm(try~sex+age+exercise+innovation+user,family=binomial(link="probit"), data=energy,subset=(!train))
tab2=table(energy$try[energy$train==FALSE],predict(fit2,energy[energy$train==FALSE,],type="response")>.5)
sum(diag(tab2))/ (sum(tab2))
fit_test_exp <-glm(try~sex+age+exercise+innovation+user+sex*exercise,family=binomial(link="probit"), data=energy,subset=(!train))
tab=table(energy$try[energy$train==FALSE],fit_test_exp$fitted.values>.5)
sum(diag(tab))/ (sum(tab))
fit2 = glm(try~sex*exercise+age+innovation+user, training, family=binomial(link="probit"))
fit2 = glm(try~sex*exercise+age+innovation+user, training, family=binomial(link="probit"))
fit2 = glm(try~sex*exercise+age+innovation+user, data=energy[energy$train==TRUE], family=binomial(link="probit"),type='response')
fit2 = glm(try~sex*exercise+age+innovation+user, data=energy[energy$train==TRUE,], family=binomial(link="probit"),type='response')
plot.roc(energy$try, fit_test$fitted.values, legacy.axes=T, print.auc=T, print.auc.x=1, print.auc.y=.9)
library(pROC)
plot.roc(energy$try[energy$train==F], predict(fit_test,energy[energy$train==F],type="response"),data=energy, legacy.axes=T, print.auc=T, print.auc.x=1, print.auc.y=.9)
plot.roc(energy$try[energy$train=="FALSE"], predict(fit_test,energy[energy$train==F],type="response"),data=energy, legacy.axes=T, print.auc=T, print.auc.x=1, print.auc.y=.9)
AUC(fit_test)
auc(fit_test)
yhat = rep(NA, nrow(energy))
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user, data=energy,family=binomial(link="probit") ,subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user, data=energy,family=binomial(link="probit") ,subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user, data=energy,family=binomial(link="probit") ,subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user, data=energy,subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
mean((energy$try-yhat)^2)
auc(energy$try,yhat)
yhat = rep(NA, nrow(energy))
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user+sex*exercise, data=energy,subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
mean((energy$try-yhat)^2)
auc(energy$try,yhat)
yhat = rep(NA, nrow(energy))
for(i in 0:4){ fit = glm(try~sex+age+exercise+innovation+user, data=energy,subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
mean((energy$try-yhat)^2)
auc(energy$try,yhat)
table[energy$cv]
table(energy$cv)
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user+sex*exercise, data=energy,family=binomial(link="probit"),subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
for(i in 0:4){ fit = lm(try~sex+age+exercise+innovation+user+sex*exercise, data=energy,family=binomial(link="probit"),subset=(cv!=i))
yhat[energy$cv==i] = predict(fit, energy[energy$cv==i,]) }
test= subset(energy$train="True")
test= subset(energy$train)
test= subset=(energy$train=="True")
energy <- read.csv('/users/andrewhu/desktop/energy.csv')
baseball <- read.csv('/users/andrewhu/desktop/baseball.csv')
fit_train<-lm(log(y)~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15+x16, data=baseball[0:200,])
summary(fit_train)
baseball$logy=log(baseball$y+.01)
yhat = predict(fit_test, baseball[201:337,])
length(yhat)
mean((baseball[201:337,]$logy - yhat)^2)
train=baseball[c(1:200),]
test=baseball[-c(1:200),]
fit5= lm(log(y)~.,data=train)
fit_train_forward <-lm(log(y)~ x3 + x13 + x15 + x8 + x12, data = train)
summary(fit_train_forward)
mean((log(baseball$y[-c(1:200)])-predict(fit_train_forward,test))^2)
fit = cv.glmnet(as.matrix(baseball[1:200,2:17]), log(baseball$y[1:200]), alpha=0, nfolds=5, lambda=seq(0,1,.001))
fit$lambda.min
lam=seq(0,1,0.0001)
set.seed(12345)
fit = cv.glmnet(as.matrix(baseball[1:200,2:17]), log(baseball$y[1:200]), alpha=0, nfolds=5, lambda=seq(0,1,.001))
fit$lambda.min
default <- read.csv('/users/andrewhu/desktop/Machine Learning/data/defaultsmall.csv')
gpa <-read.csv('/users/andrewhu/desktop/Machine Learning/data/gpa.csv')
set.seed(1234567)
n=30
x = runif(n)*3
y = sin(x*pi/2) + rnorm(n)/4
dat = data.frame(x=round(x,3), y=round(y,3))
test = data.frame(x=runif(10000)*3)
test$y = sin(test$x*pi/2) + rnorm(10000)/4
library(splines)
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
drop1(fit, test="F")
set.seed(1234567)
n=30
x = runif(n)*3
y = sin(x*pi/2) + rnorm(n)/4
dat = data.frame(x=round(x,3), y=round(y,3))
test = data.frame(x=runif(10000)*3)
test$y = sin(test$x*pi/2) + rnorm(10000)/4
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
set.seed(1234567)
n=30
x = runif(n)*3
y = sin(x*pi/2) + rnorm(n)/4
dat = data.frame(x=round(x,3), y=round(y,3))
test = data.frame(x=runif(10000)*3)
test$y = sin(test$x*pi/2) + rnorm(10000)/4
library(splines)
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
install.package(splines)
install.packages(splines)
install.packages("splines2")
library(splines)
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
set.seed(1234567)
n=30
x = runif(n)*3
y = sin(x*pi/2) + rnorm(n)/4
dat = data.frame(x=round(x,3), y=round(y,3))
test = data.frame(x=runif(10000)*3)
test$y = sin(test$x*pi/2) + rnorm(10000)/4
library(splines)
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
bs(x)
summary(fit)
set.seed(1234567)
n=30
x = runif(n)*3
y = sin(x*pi/2) + rnorm(n)/4
dat = data.frame(x=round(x,3), y=round(y,3))
test = data.frame(x=runif(10000)*3)
test$y = sin(test$x*pi/2) + rnorm(10000)/4
library(splines)
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
bs(x)
summary(fit)
set.seed(1234567)
n=30
x = runif(n)*3
y = sin(x*pi/2) + rnorm(n)/4
dat = data.frame(x=round(x,3), y=round(y,3))
test = data.frame(x=runif(10000)*3)
test$y = sin(test$x*pi/2) + rnorm(10000)/4
library(splines)
fit = lm(y ~ bs(x), dat) # simplest way to fit B-spline
drop1(fit, test="F")
bs(x)
summary(fit)
plot(dat[,1:2], pch=16)
xx = seq(0.1,2.8,0.05)
lines(xx, sin(xx*pi/2),col="red") # true function
lines(xx, predict(fit, data.frame(x=xx)),col="black") # B-spline
lines(xx, predict(fit2, data.frame(x=xx)), col="orange") # 3-polynomial
fit=gam(GPA~s(Verbal)+s(Math),data=gpa)
summary(fit)
library(gam)
install.packages(gam)
install.packages("gam")
library(gam)
fit=gam(GPA~s(Verbal)+s(Math),data=gpa)
fit=gam(gpa~s(Verbal)+s(Math),data=gpa)
fit=gam(GPA~s(Verbal)+s(Math),data=gpa)
gpa <-read.csv('/users/andrewhu/desktop/Machine Learning/data/gpa.csv')
fit=gam(GPA~s(Verbal)+s(Math),data=gpa)
summary(fit)
fit=lm(GPA~bs(Verbal)+bs(Math),data=gpa)
summary(fit)
drop1(fit,test="F")
xx=seq(40,100,1)
plot(xx,predict(fit,data.frame(Verbal=xx,Math=74)),type="l",xlab="Verbal",ylab="GPA_hat")
library(splines)
fit=glm(default~1,binomial, default)
fit2 = step(fit,scope=~ bs(use)*gender+ pmttype)
summary(fit2)
table(kick$category)
kick <- read.csv('/users/andrewhu/desktop/Machine Learning/data/kickstarter.csv')
table(kick$category)
kick= kick %>% filter(category="Art")
library(dplyr)
kick= kick %>% filter(category="Art")
kick= kick %>% filter(category=="Art")
kick$c0_65 = ifelse(kick$content <=65 & kick$content>=0, 1, 0)
kick$c66_130 = ifelse(kick$content <=130 & kick$content>=66, 1, 0)
kick$c131_225 = ifelse(kick$content <=225 & kick$content>=131, 1, 0)
kick$c226 = ifelse(kick$content>=226, 1, 0)
summary(kick$content)
fit_1 <- lm(pledged~ c66_130+ c131_225+c226, data=kick)
summary(fit_1)
kick$bin = cut(kick$content,breaks= c(0,65,130,225,Inf),include.lowest = TRUE)
fit_2<- lm(pledged~bin,kick)
summary(fit_2)
fit_3 <- lm(pledged~ I(content>65 & content<=130) + I(content>130 & content <=225)+ I(content>=226),data=kick)
summary(fit_3)
library(splines)
fit= lm(pledged~bs(content,knots=c(130)),kick)
summary(fit)
table(kick$category)
length(kick)
dim(kick)
plot(kick$pledged~kick$content, xlab="x", ylab="y")
kick_alt=kick %>% filter(content<=750)
kick <- read.csv('/users/andrewhu/desktop/Machine Learning/data/kickstarter.csv')
kick= kick %>% filter(category=="Art")
kick_alt=kick %>% filter(content<=750)
plot(predict(fit_3))
fit_3 <- lm(pledged~ I(content>65 & content<=130) + I(content>130 & content <=225)+ I(content>=226),data=kick_alt)
plot(predict(fit_3))
plot(kick$pledged~kick$content, xlab="x", ylab="y")
fit_3 <- lm(pledged~ I(content>65 & content<=130) + I(content>130 & content <=225)+ I(content>=226),data=kick_alt)
lines(kick_alt$content, predict(fit_3),col="green")
plot(predict(fit_3),kick_alt$content,xlab="predicted",ylab="actual")
fit= lm(pledged~bs(content,knots=c(130),df=4),kick)
fit= lm(pledged~bs(content,knots=c(130)),kick)
summary(fit)
fit= lm(pledged~bs(content,knots=c(130),df=4),kick)
summary(fit)
fit= lm(pledged~bs(content,knots=c(130)),kick)
summary(fit)
fit= lm(pledged~bs(content,knots=c(130),df=4),kick)
summary(fit)
kick$h = ifelse(kick$content >130,(kick$content -130 )^3, 0)
fit <- lm(pledged~content+ I(content^2) + I(content^3) +h,data= kick)
summary(fit)
fit= lm(pledged~ns(content,knots=c(130)),kick)
library(gam)
fit = gam(pledged~s(content,df=4),data=kick)
drop1(fit,test="F")
fit = gam(pledged~s(content,df=4),data=kick)
drop1(fit,test="F")
anova(fit,test="F")
fit <- lm(pledged~content+ I(content^2) + I(content^3) +I((content>130)*(content-130)^3) ,data= kick)
summary(fit)
fit = gam(pledged~s(content,df=4)+blurb,data=kick)
drip(fit,test="F")
drop(fit,test="F")
drop(fit,test=F)
drop1(fit,test="F")
anova(fit,test="F")
fit = gam(pledged~s(content,df=4)+s(blurb,df=4),data=kick)
anova(fit,test="F")
fit = gam(pledged~s(content,df=4),data=kick)
anova(fit,test="F")
kick <- read.csv('/users/andrewhu/desktop/Machine Learning/data/kickstarter.csv')
kick= kick %>% filter(category=="Art")
kick_alt=kick %>% filter(content<=750)
fit = gam(pledged~s(content,df=4),data=kick)
anova(fit,test="F")
fit = gam(pledged~content,data=kick)
anova(fit,test="F")
fit = lm(pledged~content,data=kick)
anova(fit,test="F")
fit = gam(pledged~s(content,df=4),data=kick)
anova(fit,test="F")
lines(smooth.spline(pledged,predict(fit,content<=750)),col="blue")
lines(smooth.spline(pledged,predict(fit,kick$content<=750)),col="blue")
fit= smooth.spline(pledged~content,cv=TRUE,data=kick)
install.packages("xgboost")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
library(tidyverse)
quit
quit()
library(dplyr)
library(data.table)
#Reading the data
hp <- fread("/users/andrewhu/desktop/Coursera/Data/hp.txt")
hp$dateTime =  as.POSIXct(paste(hp$Date, hp$Time), format = "%d/%m/%Y %H:%M:%S")
head(hp)
library(dplyr)
hp2 <- filter(hp, dateTime <= "2007-02-01" &  dateTime <= "2007-02-02")
head(hp2)
hp2 <- filter(hp, dateTime >= "2007-02-01" &  dateTime <= "2007-02-02")
head(hp2)
getwd()
setwd("/users/andrewhu/Documents/DataScience_JHU/Exploratory Data Analysis")
plot(hp2$dateTime, hp2$Global_active_power)
plot(hp2$dateTime, hp2$Global_active_power, type="l")
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
plot(hp2$dateTime, hp2$Global_active_power, type="l")
plot(hp2$dateTime, hp2$Global_active_power, type="l",xlab="", ylab = "Global Active Power (kilowatts)")
?plot
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab= ylab = "Energy sub metering")#meaning: don't put the data there yet
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
#plot1
hist(hp2$Global_active_power, col="red", xlab = "Global Active Power(kilowatts)")
#transform to numeric
hp2$Global_active_power<-as.numeric(hp2$Global_active_power)
#plot1
hist(hp2$Global_active_power, col="red", xlab = "Global Active Power(kilowatts)")
#plot4
par(mfrow=c(2,2))
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
#plot4
par(mfrow=1,1)
#plot4
par(mfrow=c(1,1))
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
#plot2
hp$dateTime =  as.POSIXct(paste(hp$Date, hp$Time), format = "%d/%m/%Y %H:%M:%S")
hp2 <- filter(hp, dateTime >= "2007-02-01" &  dateTime <= "2007-02-02")
plot(hp2$dateTime, hp2$Global_active_power, type="l",xlab="", ylab = "Global Active Power (kilowatts)")
#plot4
par(mfrow=c(2,2))
plot(hp2$dateTime, hp2$Voltage)
plot(hp2$dateTime, hp2$Voltage,type="l")
?plot
#plot4
par(mfrow=c(2,2))
plot(hp2$dateTime, hp2$Global_active_power, type="l",xlab="", ylab = "Global Active Power (kilowatts)")
plot(hp2$dateTime, hp2$Voltage,type="l")
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
plot(hp2$dateTime,hp2$Global_reactive_power,type="h")
#plot4
par(mfrow=c(2,2))
plot(hp2$dateTime, hp2$Global_active_power, type="l",xlab="", ylab = "Global Active Power (kilowatts)")
plot(hp2$dateTime, hp2$Voltage,type="l")
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ") )
plot(hp2$dateTime,hp2$Global_reactive_power,type="h")
#plot4
par(mfrow=c(2,2))
plot(hp2$dateTime, hp2$Global_active_power, type="l",xlab="", ylab = "Global Active Power (kilowatts)")
plot(hp2$dateTime, hp2$Voltage,type="l")
plot(hp2$dateTime, hp2$Sub_metering_1, type= "l",ylab = "Energy sub metering")#meaning: don't put the data there yet
lines(hp2$dateTime, hp2$Sub_metering_2, type= "l",col="red")
lines(hp2$dateTime, hp2$Sub_metering_3, type= "l", col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3 "), lty=c(1,1)
, bty="n"
, cex=.5 )
plot(hp2$dateTime,hp2$Global_reactive_power,type="h")
getwd()
setwd("/users/andrewhu/Documents/GitHub/Coursera_DataScience_JHU/Exploratory Data Analysis/")
getwd()
library(RPostgreSQL)
install.packages("RPostgreSQL")
library(RPostgreSQL)
con <- dbConnect(dbDriver("PostgreSQL"), host = "localhost", dbname = "dvdrental")
?dbConnect
con <- dbConnect(dbDriver("PostgreSQL"), host = "localhost", dbname = "dvdrental", password=123)
con <- dbConnect(dbDriver("PostgreSQL"), host = "localhost", dbname = "dvdrental", password=123456!)
con <- dbConnect(dbDriver("PostgreSQL"), host = "localhost", dbname = "dvdrental", password=12345)
